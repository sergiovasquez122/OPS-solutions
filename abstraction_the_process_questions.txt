1. Run process-run.py with the following flags -l 5:100, 5:100
What should the CPU utilization be. Why do you know this?

The CPU utilization should be 100% since we are only
using the CPU and not IO

actual output
./processs-run.py -c -p -l 5:100,5:100 
Time    PID: 0    PID: 1       CPU       IOs
  1    RUN:cpu     READY         1          
  2    RUN:cpu     READY         1          
  3    RUN:cpu     READY         1          
  4    RUN:cpu     READY         1          
  5    RUN:cpu     READY         1          
  6       DONE   RUN:cpu         1          
  7       DONE   RUN:cpu         1          
  8       DONE   RUN:cpu         1          
  9       DONE   RUN:cpu         1          
 10       DONE   RUN:cpu         1          

Stats: Total Time 10
Stats: CPU Busy 10 (100.00%)
Stats: IO Busy  0 (0.00%)


2. Now run with these flags: ./process-run.py -l 4:100,1:0. These flags specify one with process with 4 instructions and one that simply issues an I/O and waits for it to be done. How longs does it take to complete both processes? 

it should take 10 seconds to complete both processes.
the first process has 4 pure cpu instructions and thus
will take 4 time units to complete. The other instruction
use an I/O which takes 5 units to wait and then one
other second to complete the process

./process-run.py -c -p -l 4:100,1:0 
Time    PID: 0    PID: 1       CPU       IOs
  1    RUN:cpu     READY         1          
  2    RUN:cpu     READY         1          
  3    RUN:cpu     READY         1          
  4    RUN:cpu     READY         1          
  5       DONE    RUN:io         1          
  6       DONE   WAITING                   1
  7       DONE   WAITING                   1
  8       DONE   WAITING                   1
  9       DONE   WAITING                   1
 10*      DONE      DONE         1

Stats: Total Time 10
Stats: CPU Busy 6 (60.00%)
Stats: IO Busy  4 (40.00%)

3. Switch the order of the processes: -l 1:0,4:100 now? Does switching the order matter?

it does matter the order in which we order the 
processes. If we do it like above then while
the 1st command is waiting for IO the other command
will be executing. The total time will reduce to
6 because the first command which takes 5 time units
will wait while the other command will be executing
during the 4 times units. all tasks are then
issued the done status for an additional second.

./process-run.py -c -p -l 1:0,4:100
Time    PID: 0    PID: 1       CPU       IOs
  1     RUN:io     READY         1          
  2    WAITING   RUN:cpu         1         1
  3    WAITING   RUN:cpu         1         1
  4    WAITING   RUN:cpu         1         1
  5    WAITING   RUN:cpu         1         1
  6*      DONE      DONE         1

Stats: Total Time 6
Stats: CPU Busy 6 (100.00%)
Stats: IO Busy  4 (66.67%)


4. Weâ€™ll now explore some of the other flags. One important flag is
-S, which determines how the system reacts when a process is-
sues an I/O. With the flag set to SWITCH ON END, the system
will NOT switch to another process while one is doing I/O, in-
stead waiting until the process is completely finished. What hap-
pens when you run the following two processes (-l 1:0,4:100
-c -S SWITCH ON END), one doing I/O and the other doing CPU
work?

It will no longer execute the CPU instructions while we
are waiting for the IO process thus we will spend 5 time
units waiting for the process to complete. From there
we can execute the CPU instrucions for an additional
4 seconds. The total time is 9 seconds.

./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_END
Time    PID: 0    PID: 1       CPU       IOs
  1     RUN:io     READY         1          
  2    WAITING     READY                   1
  3    WAITING     READY                   1
  4    WAITING     READY                   1
  5    WAITING     READY                   1
  6*      DONE   RUN:cpu         1          
  7       DONE   RUN:cpu         1          
  8       DONE   RUN:cpu         1          
  9       DONE   RUN:cpu         1     

5. Now, run the same processes, but with the switching behavior set
to switch to another process whenever one is WAITING for I/O (-l
1:0,4:100 -c -S SWITCH ON IO). What happens now? Use -c
and -p to confirm that you are right.

The analysis should now revert back to question (3)

./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO -p
Time    PID: 0    PID: 1       CPU       IOs
  1     RUN:io     READY         1          
  2    WAITING   RUN:cpu         1         1
  3    WAITING   RUN:cpu         1         1
  4    WAITING   RUN:cpu         1         1
  5    WAITING   RUN:cpu         1         1
  6*      DONE      DONE         1

Stats: Total Time 6
Stats: CPU Busy 6 (100.00%)
Stats: IO Busy  4 (66.67%)

6. One other important behavior is what to do when an I/O com-
pletes. With -I IO RUN LATER, when an I/O completes, the pro-
cess that issued it is not necessarily run right away; rather, whatever
was running at the time keeps running. What happens when you
run this combination of processes? (Run ./process-run.py -l
3:0,5:100,5:100,5:100 -S SWITCH ON IO -I IO RUN LATER
-c -p) Are system resources being effectively utilized?


No it won't be effecient because when we are done with
an IO process and finish we could run a cpu instruction while 
we the instruction IO wait for another round of execution.
It would be more effecient to execute the IO and then
have the cpu instruction execute while the other process
is waiting.

./process-run.py -l 3:0,5:100,5:100 S SWITCH_ON_IO -I IO_RUN_LATER -c -p
Time    PID: 0    PID: 1    PID: 2       CPU       IOs
  1     RUN:io     READY     READY         1          
  2    WAITING   RUN:cpu     READY         1         1
  3    WAITING   RUN:cpu     READY         1         1
  4    WAITING   RUN:cpu     READY         1         1
  5    WAITING   RUN:cpu     READY         1         1
  6*     READY   RUN:cpu     READY         1          
  7      READY      DONE   RUN:cpu         1          
  8      READY      DONE   RUN:cpu         1          
  9      READY      DONE   RUN:cpu         1          
 10      READY      DONE   RUN:cpu         1          
 11      READY      DONE   RUN:cpu         1          
 12     RUN:io      DONE      DONE         1          
 13    WAITING      DONE      DONE                   1
 14    WAITING      DONE      DONE                   1
 15    WAITING      DONE      DONE                   1
 16    WAITING      DONE      DONE                   1
 17*    RUN:io      DONE      DONE         1          
 18    WAITING      DONE      DONE                   1
 19    WAITING      DONE      DONE                   1
 20    WAITING      DONE      DONE                   1
 21    WAITING      DONE      DONE                   1
 22*      DONE      DONE      DONE         1

Stats: Total Time 22
Stats: CPU Busy 14 (63.64%)
Stats: IO Busy  12 (54.55%)


7. Now run the same processes, but with -I IO RUN IMMEDIATE set,
which immediately runs the process that issued the I/O. How does
this behavior differ? Why might running a process that just com-
pleted an I/O again be a good idea?

It'll be more effecient
because when we wait for an IO we could 
also be executing CPU
instructions

./process-run.py -l 3:0,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p
Time    PID: 0    PID: 1    PID: 2       CPU       IOs
  1     RUN:io     READY     READY         1          
  2    WAITING   RUN:cpu     READY         1         1
  3    WAITING   RUN:cpu     READY         1         1
  4    WAITING   RUN:cpu     READY         1         1
  5    WAITING   RUN:cpu     READY         1         1
  6*    RUN:io     READY     READY         1          
  7    WAITING   RUN:cpu     READY         1         1
  8    WAITING      DONE   RUN:cpu         1         1
  9    WAITING      DONE   RUN:cpu         1         1
 10    WAITING      DONE   RUN:cpu         1         1
 11*    RUN:io      DONE     READY         1          
 12    WAITING      DONE   RUN:cpu         1         1
 13    WAITING      DONE   RUN:cpu         1         1
 14    WAITING      DONE      DONE         1         1
 15    WAITING      DONE      DONE         1         1
 16*      DONE      DONE      DONE         1

Stats: Total Time 16
Stats: CPU Busy 16 (100.00%)
Stats: IO Busy  12 (75.00%)

