1. Run process-run.py with the following flags -l 5:100, 5:100
What should the CPU utilization be. Why do you know this?

The CPU utilization should be 100% since we are only
using the CPU and not IO

actual output
./processs-run.py -c -p -l 5:100,5:100 
Time    PID: 0    PID: 1       CPU       IOs
  1    RUN:cpu     READY         1          
  2    RUN:cpu     READY         1          
  3    RUN:cpu     READY         1          
  4    RUN:cpu     READY         1          
  5    RUN:cpu     READY         1          
  6       DONE   RUN:cpu         1          
  7       DONE   RUN:cpu         1          
  8       DONE   RUN:cpu         1          
  9       DONE   RUN:cpu         1          
 10       DONE   RUN:cpu         1          

Stats: Total Time 10
Stats: CPU Busy 10 (100.00%)
Stats: IO Busy  0 (0.00%)


2. Now run with these flags: ./process-run.py -l 4:100,1:0. These flags specify one with process with 4 instructions and one that simply issues an I/O and waits for it to be done. How longs does it take to complete both processes? 

it should take 10 seconds to complete both processes.
the first process has 4 pure cpu instructions and thus
will take 4 time units to complete. The other instruction
use an I/O which takes 5 units to wait and then one
other second to complete the process

./process-run.py -c -p -l 4:100,1:0 
Time    PID: 0    PID: 1       CPU       IOs
  1    RUN:cpu     READY         1          
  2    RUN:cpu     READY         1          
  3    RUN:cpu     READY         1          
  4    RUN:cpu     READY         1          
  5       DONE    RUN:io         1          
  6       DONE   WAITING                   1
  7       DONE   WAITING                   1
  8       DONE   WAITING                   1
  9       DONE   WAITING                   1
 10*      DONE      DONE         1

Stats: Total Time 10
Stats: CPU Busy 6 (60.00%)
Stats: IO Busy  4 (40.00%)

3. Switch the order of the processes: -l 1:0,4:100 now? Does switching the order matter?

it does matter the order in which we order the 
processes. If we do it like above then while
the 1st command is waiting for IO the other command
will be executing. The total time will reduce to
6 because the first command which takes 5 time units
will wait while the other command will be executing
during the 4 times units. all tasks are then
issued the done status for an additional second.

./process-run.py -c -p -l 1:0,4:100
Time    PID: 0    PID: 1       CPU       IOs
  1     RUN:io     READY         1          
  2    WAITING   RUN:cpu         1         1
  3    WAITING   RUN:cpu         1         1
  4    WAITING   RUN:cpu         1         1
  5    WAITING   RUN:cpu         1         1
  6*      DONE      DONE         1

Stats: Total Time 6
Stats: CPU Busy 6 (100.00%)
Stats: IO Busy  4 (66.67%)

